{
    "Comment": "A description of my state machine",
    "StartAt": "GetExecutionId",
    "States": {
        "GetExecutionId": {
            "Type": "Task",
            "Next": "CreateDynamoDB",
            "Parameters": {
                "NumberOfBytes": 4
            },
            "Resource": "arn:aws:states:::aws-sdk:kms:generateRandom",
            "ResultPath": "$.GetExecutionId"
        },
        "CreateDynamoDB": {
            "Type": "Task",
            "Parameters": {
                "BillingMode": "PAY_PER_REQUEST",
                "AttributeDefinitions": [
                    {
                        "AttributeName": "RunId",
                        "AttributeType": "S"
                    }
                ],
                "KeySchema": [
                    {
                        "AttributeName": "RunId",
                        "KeyType": "HASH"
                    }
                ],
                "TableName": "DDBTest1"
            },
            "Resource": "arn:aws:states:::aws-sdk:dynamodb:createTable",
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "ResultPath": "$.CreateDynamoDB",
                    "Next": "SetExecutionPercentageToZero"
                }
            ],
            "Comment": "If not exists - use catch",
            "Next": "WaitForDDBToBeDiscoverable",
            "ResultPath": "$.CreateDynamoDB"
        },
        "WaitForDDBToBeDiscoverable": {
            "Type": "Wait",
            "Seconds": 5,
            "Next": "SetExecutionPercentageToZero"
        },
        "SetExecutionPercentageToZero": {
            "Type": "Task",
            "Resource": "arn:aws:states:::dynamodb:putItem",
            "Parameters": {
                "TableName": "DDBTest1",
                "Item": {
                    "RunId": {
                        "S.$": "$.GetExecutionId.Plaintext"
                    },
                    "PercentComplete": {
                        "S": "0"
                    }
                }
            },
            "Comment": "DDB put item",
            "Next": "WriteSSMParameter",
            "ResultPath": "$.SetExecutionPercentageToZero"
        },
        "WriteSSMParameter": {
            "Type": "Pass",
            "Next": "RequestSpot",
            "Comment": "Save startpercentage! duration? Save DDB table name?",
            "Result": {
                "Dummy": "Stuff"
            },
            "ResultPath": "$.WriteSSMParameter"
        },
        "RequestSpot": {
            "Type": "Task",
            "Parameters": {
                "InstanceCount": 1,
                "LaunchSpecification": {
                    "ImageId": "${SpotChaosInstanceImageId}",
                    "InstanceType": "${SpotChaosInstanceType}",
                    "SubnetId": "${SpotChaosInstanceSubnetId}",
                    "IamInstanceProfile": {
                        "Arn": "${SpotChaosInstanceProfileArn}"
                    },
                    "UserData": "IyEvdXNyL2Jpbi9iYXNoIC14CmNhdCA+L2hvbWUvZWMyLXVzZXIvc2VuZF9tZXRyaWNzLnB5IDw8RU9UCiMhL3Vzci9iaW4vZW52IHB5dGhvbjMKCmltcG9ydCBib3RvMwppbXBvcnQgdGltZQppbXBvcnQgc3lzCmltcG9ydCBzaWduYWwKaW1wb3J0IHVybGxpYi5yZXF1ZXN0CgpjaGVja3BvaW50X3NhdmVkX3BlcmNlbnRhZ2UgPSAwCgpkZWYgc2lnbmFsX2hhbmRsZXIoc2lnLGZyYW1lKToKICAgIHByaW50KHNpZ25hbC5TaWduYWxzKHNpZykpCiAgICBwcmludCgiR3JhY2VmdWwgZXhpdCAtIHJlcG9ydGluZyBmaW5hbCBtZXRyaWNzIC0gY2hlY2twb2ludGVkICVmIiAlIGNoZWNrcG9pbnRfc2F2ZWRfcGVyY2VudGFnZSkKICAgICMgIyBEbyBub3Qgc3VpY2lkZSBpbnN0YW5jZSAtIHdlIGFzc3VtZSB0aGUgdGVybWluYXRpb24gbm90aWNlIGlzIGd1YXJhbnRlZWQKICAgICMgdGVybWluYXRlX3NlbGZfaW5zdGFuY2VzKGVjMl9jbGllbnQpCiAgICBzeXMuZXhpdCgwKQoKY2F0Y2hhYmxlX3NpZ3MgPSBzZXQoc2lnbmFsLlNpZ25hbHMpIC0ge3NpZ25hbC5TSUdLSUxMLCBzaWduYWwuU0lHU1RPUCwgc2lnbmFsLlNJR0NITER9CmZvciBzaWcgaW4gY2F0Y2hhYmxlX3NpZ3M6CiAgICBwcmludCgiaGFuZGxlICVzIiAlIHNpZykKICAgIHNpZ25hbC5zaWduYWwoc2lnLCBzaWduYWxfaGFuZGxlcikKCmRlZiBnZXRfc3NtX3BhcmFtZXRlcihjbGllbnQsbmFtZSxkZWZhdWx0X3NldHRpbmc9NSk6CiAgICB0cnk6CiAgICAgICAgcmVzcG9uc2UgPSBjbGllbnQuZ2V0X3BhcmFtZXRlcigKICAgICAgICAgICAgTmFtZT1uYW1lLAogICAgICAgICAgICBXaXRoRGVjcnlwdGlvbj1UcnVlCiAgICAgICAgKQogICAgICAgICMgcHJpbnQocmVzcG9uc2UpCiAgICAgICAgdmFsdWUgPSBmbG9hdChyZXNwb25zZS5nZXQoIlBhcmFtZXRlciIse30pLmdldCgiVmFsdWUiLHN0cihkZWZhdWx0X3NldHRpbmcpKSkgCiAgICAgICAgIyBwcmludCgiVmFsdWUgcmV0cmlldmVkOiAlcz0lZiIgJSAobmFtZSx2YWx1ZSkpCiAgICAgICAgcmV0dXJuIHZhbHVlCiAgICBleGNlcHQ6CiAgICAgICAgcHJpbnQoIkNvdWxkbid0IHJlYWQgcGFyYW1ldGVyICVzLCB1c2luZyBkZWZhdWx0IENoZWNrUG9pbnQgZHVyYXRpb24iICUgbmFtZSkKICAgIHJldHVybiBkZWZhdWx0X3NldHRpbmcKCmRlZiBwdXRfY2xvdWR3YXRjaF9wZXJjZW50YWdlcyhjbGllbnQsc2F2ZWRfcGVyY2VudGFnZSx1bnNhdmVkX3BlcmNlbnRhZ2UpOgogICAgY2xpZW50LnB1dF9tZXRyaWNfZGF0YSgKICAgICAgICBNZXRyaWNEYXRhPVsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgJ01ldHJpY05hbWUnOiAidW5zYXZlZCIsCiAgICAgICAgICAgICAgICAnVW5pdCc6ICdQZXJjZW50JywKICAgICAgICAgICAgICAgICdWYWx1ZSc6IHVuc2F2ZWRfcGVyY2VudGFnZSwKICAgICAgICAgICAgICAgICdTdG9yYWdlUmVzb2x1dGlvbic6IDEKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgJ01ldHJpY05hbWUnOiAiY2hlY2twb2ludGVkIiwKICAgICAgICAgICAgICAgICdVbml0JzogJ1BlcmNlbnQnLAogICAgICAgICAgICAgICAgJ1ZhbHVlJzogc2F2ZWRfcGVyY2VudGFnZSwKICAgICAgICAgICAgICAgICdTdG9yYWdlUmVzb2x1dGlvbic6IDEKICAgICAgICAgICAgfSwKICAgICAgICBdLAogICAgICAgIE5hbWVzcGFjZT0nZmlzd29ya3Nob3AnCiAgICApCgpkZWYgdGVybWluYXRlX3NlbGZfaW5zdGFuY2UoY2xpZW50KToKICAgIGluc3RhbmNlX2lkID0gdXJsbGliLnJlcXVlc3QudXJsb3BlbignaHR0cDovLzE2OS4yNTQuMTY5LjI1NC9sYXRlc3QvbWV0YS1kYXRhL2luc3RhbmNlLWlkJykucmVhZCgpLmRlY29kZSgpICAgIAogICAgY2xpZW50LnRlcm1pbmF0ZV9pbnN0YW5jZXMoCiAgICAgICAgSW5zdGFuY2VJZHMgPSBbIGluc3RhbmNlX2lkIF0KICAgICkKICAgIHByaW50KCJTdWNjZXNzZnVsbHkgc2VudCBpbnN0YW5jZSB0ZXJtaW5hdGlvbiByZXF1ZXN0IGZvciAlcyIgJSBpbnN0YW5jZV9pZCkKCnRyeToKICAgIHNzbV9jbGllbnQgPSBib3RvMy5jbGllbnQoJ3NzbScpCiAgICBjd19jbGllbnQgPSBib3RvMy5jbGllbnQoJ2Nsb3Vkd2F0Y2gnKQogICAgZWMyX2NsaWVudCA9IGJvdG8zLmNsaWVudCgnZWMyJykKZXhjZXB0OgogICAgcHJpbnQoIkNvdWxkIG5vdCBjb25uZWN0IHRvIEFXUywgZGlkIHlvdSBzZXQgY3JlZGVudGlhbHM/IikKICAgIHN5cy5leGl0KDEpCgojIER1cmF0aW9uIHVudGlsIGpvYiBjb21wbGV0aW9uIGluIG1pbnV0ZXMgKHNob3VsZCBiZSAyIDwgeCA8IDE1KQpqb2JfZHVyYXRpb25fbWludXRlcyA9IGdldF9zc21fcGFyYW1ldGVyKHNzbV9jbGllbnQsJ0Zpc1dvcmtzaG9wU3BvdEpvYkR1cmF0aW9uJyw1KSAKCiMgVGltZSBiZXR3ZWVuIGNoZWNrcG9pbnRzCmNoZWNrcG9pbnRfaW50ZXJ2YWxfbWludXRlcyA9IGdldF9zc21fcGFyYW1ldGVyKHNzbV9jbGllbnQsJ0Zpc1dvcmtzaG9wU3BvdENoZWNrcG9pbnREdXJhdGlvbicsMC4yKQoKCnNsZWVwX2R1cmF0aW9uX3NlY29uZHMgPSA2MC4wICogam9iX2R1cmF0aW9uX21pbnV0ZXMgLyAxMDAuMApjaGVja3BvaW50X2NvdW50ZXJfc2Vjb25kcyA9IDAuMAoKcHJpbnQoIlN0YXJ0aW5nIGpvYiAoZHVyYXRpb24gJWYgbWluIC8gY2hlY2twb2ludCAlZiBtaW4pIiAlICgKICAgIGpvYl9kdXJhdGlvbl9taW51dGVzLAogICAgY2hlY2twb2ludF9pbnRlcnZhbF9taW51dGVzCikpCnB1dF9jbG91ZHdhdGNoX3BlcmNlbnRhZ2VzKGN3X2NsaWVudCwwLDApCmZvciBpaSBpbiByYW5nZSgxMDApOgogICAgdGltZS5zbGVlcChzbGVlcF9kdXJhdGlvbl9zZWNvbmRzKQoKICAgICMgcmVjb3JkIHByb2dyZXNzIGRhdGEgdGhhdCBjYW4gYmUgbG9zdAogICAgcHV0X2Nsb3Vkd2F0Y2hfcGVyY2VudGFnZXMoY3dfY2xpZW50LGNoZWNrcG9pbnRfc2F2ZWRfcGVyY2VudGFnZSxpaSsxKQoKICAgIGNoZWNrcG9pbnRfY291bnRlcl9zZWNvbmRzICs9IHNsZWVwX2R1cmF0aW9uX3NlY29uZHMKICAgIGNoZWNrcG9pbnRfZmxhZz0oKGNoZWNrcG9pbnRfY291bnRlcl9zZWNvbmRzLzYwLjApID4gY2hlY2twb2ludF9pbnRlcnZhbF9taW51dGVzKQogICAgcHJpbnQoIiVmJSUgY29tcGxldGUgLSBjaGVja3BvaW50PSVzIiAlIChpaSsxLGNoZWNrcG9pbnRfZmxhZykpCiAgICBpZiBjaGVja3BvaW50X2ZsYWc6CiAgICAgICAgcHJpbnQoInJlc2V0dGluZyBmbGFnIikKICAgICAgICBjaGVja3BvaW50X2NvdW50ZXJfc2Vjb25kcyA9IDAuMAogICAgICAgIGNoZWNrcG9pbnRfc2F2ZWRfcGVyY2VudGFnZSA9IGlpKzEKCnB1dF9jbG91ZHdhdGNoX3BlcmNlbnRhZ2VzKGN3X2NsaWVudCwxMDAsMTAwKQoKIyBBdCBjb21wbGV0aW9uIHN1aWNpZGUgaW5zdGFuY2UKdGVybWluYXRlX3NlbGZfaW5zdGFuY2UoZWMyX2NsaWVudCkKRU9UCnl1bSBpbnN0YWxsIC15IGpxCnBpcDMgaW5zdGFsbCBib3RvMwpjYXQgPi9ob21lL2VjMi11c2VyL3NlbmRfbWV0cmljcyA8PEVPVAojIS91c3IvYmluL2Jhc2gKL3Vzci9iaW4vZGF0ZQpleHBvcnQgQVdTX0RFRkFVTFRfUkVHSU9OPSQoY3VybCAtcyAxNjkuMjU0LjE2OS4yNTQvbGF0ZXN0L2R5bmFtaWMvaW5zdGFuY2UtaWRlbnRpdHkvZG9jdW1lbnQgfCBqcSAtciAnLnJlZ2lvbicpCi91c3IvYmluL25vaHVwIC91c3IvYmluL3B5dGhvbjMgL2hvbWUvZWMyLXVzZXIvc2VuZF9tZXRyaWNzLnB5IDA8Ji0gJj4+L3Zhci9sb2cvc2VuZF9tZXRyaWNzLmxvZyAmCi91c3IvYmluL2RhdGUKRU9UCmNobW9kIDc1NSAvaG9tZS9lYzItdXNlci9zZW5kX21ldHJpY3MKdG91Y2ggL3Zhci9sb2cvc2VuZF9tZXRyaWNzLmxvZwpjaG1vZCA2NjYgL3Zhci9sb2cvc2VuZF9tZXRyaWNzLmxvZwojL3Vzci9iaW4vYmFzaCAteCAvaG9tZS9lYzItdXNlci9zZW5kX21ldHJpY3MKY2F0ID4vbGliL3N5c3RlbWQvc3lzdGVtL3Nwb3Quc2VydmljZSA8PEVPVApbVW5pdF0KRGVzY3JpcHRpb249U3RhcnQgZmFrZSBzcG90IGNhbGN1bGF0aW9uCgpbU2VydmljZV0KVHlwZT1mb3JraW5nCkV4ZWNTdGFydD0vdXNyL2Jpbi9iYXNoIC14IC9ob21lL2VjMi11c2VyL3NlbmRfbWV0cmljcwpFT1QKc3lzdGVtY3RsIHN0YXJ0IHNwb3QK"
                }
            },
            "Resource": "arn:aws:states:::aws-sdk:ec2:requestSpotInstances",
            "Next": "ErrorHandling?",
            "ResultPath": "$.RequestSpot"
        },
        "ErrorHandling?": {
            "Type": "Pass",
            "Next": "GetSpotInfo",
            "Result": {
                "Dummy": "Stuff"
            },
            "ResultPath": "$.SpotRequestErrorHandling"
        },
        "GetSpotInfo": {
            "Type": "Task",
            "Parameters": {
                "SpotInstanceRequestIds.$": "$.RequestSpot.SpotInstanceRequests[*].SpotInstanceRequestId"
            },
            "Resource": "arn:aws:states:::aws-sdk:ec2:describeSpotInstanceRequests",
            "Comment": "See if we have an instance ID yet",
            "Next": "CheckForInstanceId",
            "ResultPath": "$.GetSpotInfo"
        },
        "CheckForInstanceId": {
            "Type": "Choice",
            "Choices": [
                {
                    "Variable": "$.GetSpotInfo.SpotInstanceRequests[0].InstanceId",
                    "IsPresent": true,
                    "Next": "TagSpotInstance"
                }
            ],
            "Default": "WaitForInstanceId"
        },
        "TagSpotInstance": {
            "Type": "Task",
            "Parameters": {
                "ResourceARNList.$": "States.Array(States.Format('${SpotChaosInstanceArnPrefix}{}',$.GetSpotInfo.SpotInstanceRequests[0].InstanceId))",
                "Tags": {
                    "Name": "Fis/Spot"
                }
            },
            "Resource": "arn:aws:states:::aws-sdk:resourcegroupstaggingapi:tagResources",
            "ResultPath": "$.TagSpotInstance",
            "Next": "WaitForJobFinish"
        },
        "WaitForJobFinish": {
            "Type": "Pass",
            "Next": "IsFinished?",
            "Result": {
                "JobFinished": true
            },
            "Comment": "Lambda wait with heartbeat",
            "ResultPath": "$.WaitForJobFinish"
        },
        "IsFinished?": {
            "Type": "Choice",
            "Default": "WriteSSMParameter",
            "Choices": [
                {
                    "Variable": "$.WaitForJobFinish.JobFinished",
                    "BooleanEquals": true,
                    "Next": "CleanDDB?"
                }
            ]
        },
        "CleanDDB?": {
            "Type": "Pass",
            "Next": "WaitMax15min"
        },
        "WaitMax15min": {
            "Type": "Wait",
            "Seconds": 900,
            "Next": "TerminateInstanceIfStillRunning",
            "Comment": "We only allow 15 for spot execution. Wait for 15 min before cleanup"
        },
        "TerminateInstanceIfStillRunning": {
            "Type": "Task",
            "Next": "KillInstances?",
            "Parameters": {
                "InstanceIds.$": "States.Array(States.Format('${SpotChaosInstanceArnPrefix}{}',$.GetSpotInfo.SpotInstanceRequests[0].InstanceId))"
            },
            "Resource": "arn:aws:states:::aws-sdk:ec2:terminateInstances",
            "Comment": "If instance is still running after 15min something went wrong"
        },
        "KillInstances?": {
            "Type": "Pass",
            "End": true
        },
        "WaitForInstanceId": {
            "Type": "Wait",
            "Seconds": 5,
            "Next": "GetSpotInfo"
        }
    }
}