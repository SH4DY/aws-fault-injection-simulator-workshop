{
    "Comment": "A description of my state machine",
    "StartAt": "GetExecutionId",
    "States": {
        "GetExecutionId": {
            "Type": "Task",
            "Next": "CreateDynamoDB",
            "Parameters": {
                "NumberOfBytes": 4
            },
            "Resource": "arn:aws:states:::aws-sdk:kms:generateRandom",
            "ResultPath": "$.GetExecutionId"
        },
        "CreateDynamoDB": {
            "Type": "Task",
            "Parameters": {
                "BillingMode": "PAY_PER_REQUEST",
                "AttributeDefinitions": [
                    {
                        "AttributeName": "RunId",
                        "AttributeType": "S"
                    }
                ],
                "KeySchema": [
                    {
                        "AttributeName": "RunId",
                        "KeyType": "HASH"
                    }
                ],
                "TableName": "${SpotChaosDynamoTableName}"
            },
            "Resource": "arn:aws:states:::aws-sdk:dynamodb:createTable",
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "ResultPath": "$.CreateDynamoDB",
                    "Next": "SetExecutionPercentageToZero"
                }
            ],
            "Comment": "If not exists - use catch",
            "Next": "WaitForDDBToBeDiscoverable",
            "ResultPath": "$.CreateDynamoDB"
        },
        "WaitForDDBToBeDiscoverable": {
            "Type": "Wait",
            "Seconds": 5,
            "Next": "SetExecutionPercentageToZero"
        },
        "SetExecutionPercentageToZero": {
            "Type": "Task",
            "Resource": "arn:aws:states:::dynamodb:putItem",
            "Parameters": {
                "TableName": "${SpotChaosDynamoTableName}",
                "Item": {
                    "RunId": {
                        "S.$": "$.GetExecutionId.Plaintext"
                    },
                    "Percentage": {
                        "S": "0"
                    }
                }
            },
            "Comment": "DDB put item",
            "Next": "GetCompletionPercentage",
            "ResultPath": "$.SetExecutionPercentageToZero"
        },
        "GetCompletionPercentage": {
            "Type": "Task",
            "Resource": "arn:aws:states:::dynamodb:getItem",
            "Parameters": {
                "TableName": "${SpotChaosDynamoTableName}",
                "Key": { "RunId": { "S.$": "$.GetExecutionId.Plaintext" } }
            },
            "Comment": "DDB get item",
            "ResultPath": "$.GetCompletionPercentage",
            "Next": "RequestSpot"
        },
        "RequestSpot": {
            "Type": "Task",
            "Parameters": {
                "InstanceCount": 1,
                "LaunchSpecification": {
                    "ImageId": "${SpotChaosInstanceImageId}",
                    "InstanceType": "${SpotChaosInstanceType}",
                    "SubnetId": "${SpotChaosInstanceSubnetId}",
                    "IamInstanceProfile": {
                        "Arn": "${SpotChaosInstanceProfileArn}"
                    },
                    "UserData": ""
                }
            },
            "Resource": "arn:aws:states:::aws-sdk:ec2:requestSpotInstances",
            "Next": "ErrorHandling?",
            "ResultPath": "$.RequestSpot"
        },
        "ErrorHandling?": {
            "Type": "Pass",
            "Next": "GetSpotInfo",
            "Result": {
                "Dummy": "Stuff"
            },
            "ResultPath": "$.SpotRequestErrorHandling"
        },
        "GetSpotInfo": {
            "Type": "Task",
            "Parameters": {
                "SpotInstanceRequestIds.$": "$.RequestSpot.SpotInstanceRequests[*].SpotInstanceRequestId"
            },
            "Resource": "arn:aws:states:::aws-sdk:ec2:describeSpotInstanceRequests",
            "Comment": "See if we have an instance ID yet",
            "Next": "CheckForInstanceId",
            "ResultPath": "$.GetSpotInfo"
        },
        "CheckForInstanceId": {
            "Type": "Choice",
            "Choices": [
                {
                    "Variable": "$.GetSpotInfo.SpotInstanceRequests[0].InstanceId",
                    "IsPresent": true,
                    "Next": "TagSpotInstance"
                }
            ],
            "Default": "WaitForInstanceId"
        },
        "TagSpotInstance": {
            "Type": "Task",
            "Parameters": {
                "ResourceARNList.$": "States.Array(States.Format('${SpotChaosInstanceArnPrefix}{}',$.GetSpotInfo.SpotInstanceRequests[0].InstanceId))",
                "Tags": {
                    "Name": "Fis/Spot"
                }
            },
            "Resource": "arn:aws:states:::aws-sdk:resourcegroupstaggingapi:tagResources",
            "ResultPath": "$.TagSpotInstance",
            "Next": "WaitForJobFinish"
        },
        "WaitForJobFinish": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
            "ResultPath": "$.WaitForJobFinish",
            "Parameters": {
              "FunctionName": "${SpotChaosLambdaWaiter}",
              "Payload": {
                "InstanceId.$": "$.GetSpotInfo.SpotInstanceRequests[0].InstanceId",
                "ExecutionId.$": "$.GetExecutionId.Plaintext",
                "HeartbeatToken.$": "$$.Task.Token",
                "JobDuration.$": "$.JobDuration",
                "CheckpointDuration.$": "$.CheckpointDuration",
                "Percentage.$": "$.GetCompletionPercentage.Item.Percentage.S" 
              }
            },
            "TimeoutSeconds": 900,
            "HeartbeatSeconds": 120,
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException"
                ],
                "IntervalSeconds": 2,
                "MaxAttempts": 6,
                "BackoffRate": 2
              }
            ],
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.Timeout"
                    ],
                    "ResultPath": "$.WaitForJobFinish",
                    "Next": "GetCompletionPercentage"
                }
            ],
            "Next": "IsFinished?",
            "Comment": "Lambda wait with heartbeat"
        },
        "IsFinished?": {
            "Type": "Choice",
            "Default": "GetCompletionPercentage",
            "Choices": [
                {
                    "Variable": "$.WaitForJobFinish.JobFinished",
                    "BooleanEquals": true,
                    "Next": "CleanDDB?"
                }
            ]
        },
        "CleanDDB?": {
            "Type": "Pass",
            "Next": "WaitMax15min"
        },
        "WaitMax15min": {
            "Type": "Wait",
            "Seconds": 900,
            "Next": "TerminateInstanceIfStillRunning",
            "Comment": "We only allow 15 for spot execution. Wait for 15 min before cleanup"
        },
        "TerminateInstanceIfStillRunning": {
            "Type": "Task",
            "Next": "KillInstances?",
            "Parameters": {
                "InstanceIds.$": "States.Array($.GetSpotInfo.SpotInstanceRequests[0].InstanceId)"
            },
            "Resource": "arn:aws:states:::aws-sdk:ec2:terminateInstances",
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "ResultPath": "$.TerminateInstanceIfStillRunning",
                    "Next": "KillInstances?"
                }
            ],
            "Comment": "If instance is still running after 15min something went wrong",
            "ResultPath": "$.TerminateInstanceIfStillRunning"
        },
        "KillInstances?": {
            "Type": "Pass",
            "End": true
        },
        "WaitForInstanceId": {
            "Type": "Wait",
            "Seconds": 5,
            "Next": "GetSpotInfo"
        }
    }
}