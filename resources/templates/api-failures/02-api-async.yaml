---
AWSTemplateFormatVersion: 2010-09-09
Description: FIS ApiGateway
Parameters:
  apiGatewayName:
    Type: String
    Default: fis-workshop
  apiGatewayStageName:
    Type: String
    AllowedPattern: "[a-z0-9]+"
    Default: v1
  ThrottleFunctionName:
    Type: String
    AllowedPattern: "[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+"
    Default: fis-workshop-api-throttle
  ErrorFunctionName:
    Type: String
    AllowedPattern: "[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+"
    Default: fis-workshop-api-error
  ErrorQueue:
    Type: String
    AllowedPattern: "[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+"
    Default: fis-workshop-queue
Resources:
  apiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: FIS-Workshop-API-Failures
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Ref apiGatewayName

  apiGatewayGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt throttleFunction.Arn
      ResourceId: !GetAtt apiGateway.RootResourceId
      RestApiId: !Ref apiGateway

  apiGatewayPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt errorFunction.Arn
      ResourceId: !GetAtt apiGateway.RootResourceId
      RestApiId: !Ref apiGateway

  apiGatewayDeployment2:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - apiGatewayGetMethod
      - apiGatewayPostMethod
    Properties:
      RestApiId: !Ref apiGateway
      StageName: !Ref apiGatewayStageName

  throttleFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3

          ec2 = boto3.client('ec2')

          def describe_instances():
            resp = ec2.describe_instances()
            instance_ids = [ i.get('InstanceId') for i in resp['Reservations'][0].get('Instances')]
            return {
              "InstanceIds": instance_ids,
              "RetryAttempts": resp['ResponseMetadata'].get('RetryAttempts')
            }

          def handler(event,context):
            return {
              "body": f"{describe_instances()}" + "\n",
              "headers": {
                "Content-Type": "text/plain"
              },
              'statusCode': 200
            }
      Description: FIS Workshop
      FunctionName: !Ref ThrottleFunctionName
      Handler: index.handler
      MemorySize: 128
      Timeout: 30
      Role: !GetAtt lambdaIAMRole.Arn
      Runtime: python3.8

  errorFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import json
          from os import environ as env

          sqs = boto3.client('sqs')
          queue = sqs.get_queue_url(QueueName=env.get("QUEUE")).get('QueueUrl')


          def handler(event,context):
            sqs.send_message(QueueUrl=queue,MessageBody="ok")
            return {
              "body": json.dumps({"jobId":context.aws_request_id}) + "\n",
              "headers": {
                "Content-Type": "text/plain"
              },
              'statusCode': 200
            }

      Description: FIS Workshop
      FunctionName: !Ref ErrorFunctionName
      Environment:
        Variables:
          QUEUE: !Ref ErrorQueue
      Handler: index.handler
      MemorySize: 128
      Timeout: 30
      Role: !GetAtt lambdaIAMRole.Arn
      Runtime: python3.8

  lambdaThrottleInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt throttleFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/${apiGatewayStageName}/GET/*

  lambdaErrorInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt errorFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/${apiGatewayStageName}/POST/*

  errorQueue:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      MaximumMessageSize: 262144
      MessageRetentionPeriod: 1209600
      QueueName: !Ref ErrorQueue
      ReceiveMessageWaitTimeSeconds: 0
      VisibilityTimeout: 30

  lambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ThrottleFunctionName}:*
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ErrorFunctionName}:*
          PolicyName: lambda
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - ec2:DescribeInstances
                Effect: Allow
                Resource: "*"
          PolicyName: DescribeInstances
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - sqs:SendMessage
                  - sqs:GetQueueUrl
                Effect: Allow
                Resource: !GetAtt errorQueue.Arn
          PolicyName: SendSQSMessage

  lambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ThrottleFunctionName}
      RetentionInDays: 90

Outputs:
  apiGatewayInvokeURL:
    Value: !Sub https://${apiGateway}.execute-api.${AWS::Region}.amazonaws.com/${apiGatewayStageName}
